<?php

namespace Tuda\LaravelCouchbase\Eloquent;

use Tuda\LaravelCouchbase\Eloquent\Events\QueryFired;
use Tuda\LaravelCouchbase\Eloquent\Query\Builder;
use Tuda\LaravelCouchbase\Eloquent\Query\Grammar;
use Tuda\LaravelCouchbase\Eloquent\Query\Processor;
use Couchbase\Bucket;
use Couchbase\N1qlQuery;

class CouchbaseConnection extends \Ytake\LaravelCouchbase\Database\CouchbaseConnection
{

    protected $consistency = N1qlQuery::REQUEST_PLUS;

    protected $bucketInstance;

    /**
     * @return string
     */
    public function getBucketName()
    {
        return $this->bucket;
    }

    /**
     * Get the Couchbase bucket object.
     *
     * @return \CouchbaseBucket
     */
    public function getCouchbaseBucket()
    {
        return $this->bucketInstance;
    }

    /**
     * @param N1qlQuery $query
     *
     * @return mixed
     */
    protected function executeQuery(N1qlQuery $query)
    {
        $bucket = $this->openBucket($this->bucket);
        $this->registerOption($bucket);
        $this->firePreparedQuery($query);
        $result = $this->bucketInstance->query($query);
        $this->fireReturning($result);

        return $result;
    }

    /**
     * @param string $name
     *
     * @return Bucket
     */
    public function openBucket(string $name): Bucket
    {
        $couchbase = $this->getCouchbase();
        if ($this->bucketPassword === '') {
            return $this->bucketInstance = $couchbase->openBucket($name);
        }

        return $this->bucketInstance = $couchbase->openBucket($name, $this->bucketPassword);
    }

    /**
     * Get the default query grammar instance.
     *
     * @return \Illuminate\Database\Query\Grammars\Grammar
     */
    protected function getDefaultQueryGrammar()
    {
        return new Grammar();
    }

    /**
     * Get a new query builder instance.
     * @return Builder|\Ytake\LaravelCouchbase\Query\Builder
     * @throws \Exception
     */
    public function query()
    {
        return new Builder(
            $this, $this->getQueryGrammar(), $this->getPostProcessor()
        );
    }

    /**
     * @param string $table
     * @param string $as
     * @return Builder|\Ytake\LaravelCouchbase\Query\Builder
     * @throws \Exception
     */
    public function table($table, $as = null)
    {
        return $this->bucket($table)->query();
    }

    /**
     * Get the default post processor instance.
     *
     * @return \Illuminate\Database\Query\Processors\Processor
     */
    protected function getDefaultPostProcessor()
    {
        return new Processor();
    }

    public function affectingStatement($query, $bindings = [])
    {
        $isSuccessFul = false;
        try {
            $result = parent::affectingStatement($query, $bindings); // TODO: Change the autogenerated stub
            $isSuccessFul = true;
        } finally {
            $this->logQueryFired($query, [
                'consistency' => $this->consistency,
                'positionalParams' => $bindings,
                'isSuccessful' => $isSuccessFul
            ]);
        }


        return $result;
    }

    /**
     * {@inheritdoc}
     */
    public function select($query, $bindings = [], $useReadPdo = true)
    {
        return $this->selectWithMeta($query, $bindings, $useReadPdo)->rows;
    }

    public function selectWithMeta($query, $bindings = [], $useReadPdo = true)
    {
        return $this->run($query, $bindings, function ($query, $bindings) {
            if ($this->pretending()) {
                return [];
            }

            $result = $this->execute($query, $bindings);
//            if (isset($result->rows)) {
//                $result->rows = json_decode(json_encode($result->rows), true);
//            }

            return $result;
        });
    }

    /**
     * @param string $query
     * @param array $options
     */
    public function logQueryFired(string $query, array $options)
    {
        $this->event(new QueryFired($query, $options));
    }
}
